"""
描述: 通过文件对话窗口或者拖放目标文件到工具中, 识别到该文件的路径. 点击运行按钮
    生成结果文件.
"""
from os.path import exists

from enaml.layout.api import align, hbox, vbox
from enaml.styling import *
from enaml.widgets.api import *


enamldef Main(Window): window:
    title = 'Markdown/HTML to image base64 embedded'

    attr ifile = ""
    attr ofile = ""
    attr tip = ""

    Container:
        constraints = [
            hbox(_label, _field, _browse, _run),
            vbox(_label, _tip),
            hbox(_tip, _open),
            align('v_center', _label, _field, _browse, _run),
            _browse.height == _field.height,
        ]
        Label: _label:
            text = 'Select md/html:'
        Field: _field:
            hug_width = 'ignore'
            hug_height = 'ignore'
            text := window.ifile
            text ::
                # when text changed, clear the tip
                window.tip = ''
                window.ofile = ''
#                _progress.value = 0
        PushButton: _browse:
            text = 'Browse'
            clicked ::
                path = FileDialogEx.get_open_file_name(window)
                if path:
                    window.ifile = path
        PushButton: _run:
            text = 'Run'
            clicked ::
                ifile = window.ifile

                if exists(ifile):  # validate path
                    if ifile.endswith('.md'):
                        import md2html_base64 as processor
                    elif ifile.endswith('.html'):
                        import html_base64 as processor
                    else:
                        window.tip = 'Please input a .md/.html file.'
                        processor = None  # enaml not allowed `return` statement
                        #   in a notification block, so i have to set processor
                        #   to None to continue.

                    if processor:
                        window.tip = 'Processing, please wait...'
                        window.ofile = processor.main(ifile)
                        window.tip = 'Successfully generated base64 file!'

                else:
                    window.tip = 'The file doesn\'t exist!'

#        ProgressBar: _progress:
#            pass
        PushButton: _open:
            text = 'Open'
            enabled << bool(ofile.endswith('.html'))
            clicked ::
                if window.tip == 'Successfully generated base64 file!':
                    path = window.ofile
                else:
                    path = _field.text
                if exists(path):
                    import os
                    from os.path import abspath
                    os.startfile(abspath(path))
                else:
                    window.tip = 'Cannot open file because file not exists!'
        Label: _tip:
            text << window.tip

    StyleSheet:
        Style:
            element = 'Field'
            Setter:  # FIXME: no effect
                field = 'width'
                value = '100px'
            Setter:  # FIXME: no effect
                field = 'height'
                value = '40px'
            Setter:
                field = 'padding-left'
                value = '2px'
            Setter:
                field = 'padding-right'
                value = '2px'
        Style:  # font
            Setter:
                field = 'font-family'
                value = 'Microsoft YaHei UI'
            Setter:
                field = 'font-size'
                value = '13px'
        Style:  # button
            element = 'PushButton'
            Setter:
                field = 'background-color'
                value = '#ffffff'
            Setter:
                field = 'border'
                value = '1px solid #cccccc'
            Setter:
                field = 'border-radius'
                value = '4px'
            Setter:
                field = 'padding-left'
                value = '10px'
            Setter:
                field = 'padding-right'
                value = '10px'
        Style:  # button on focus
            element = 'PushButton'
            pseudo_class = 'pressed'
            Setter:
                field = 'background-color'
                value = '#0078d7'
            Setter:
                field = 'color'
                value = '#ffffff'
